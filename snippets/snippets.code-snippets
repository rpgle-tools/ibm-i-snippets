{
  "Declare procedure prototype for RPGLE Free Form":{
    "prefix": "!dclprfree",
    "description": "Declare a prototype for a procedure for free syntax",
    "body": [
      "dcl-pr ${1:procname};",
      "\t$0",
      "end-pr;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare procedure prototype for RPGLE FixedForm":{
    "prefix": "!dclprfixed",
    "description": "Declare a prototype for a procedure for columnar syntax",
    "body": [
      "     d ${1:procname}...",
      "     d                  pr",
      "$0",
    ],
    "scope": "sqlrpgle,rpgle,rpg"
  },
  "Declare exportable procedure prototype for RPGLE Free Form":{
    "prefix": "!dcleprocfree",
    "description": "Declare a prototype for a procedure for free syntax",
    "body": [
      "dcl-proc ${1:procname} export;",
      "\t$0",
      "end-proc;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare exportable procedure prototype for RPGLE FixedForm":{
    "prefix": "!dcleprocfixed",
    "description": "Declare a prototype for a procedure for columnar syntax",
    "body": [
      "     p ${1:procname}...",
      "     p                                      export",
      "     p                  b",
      "$0",
      "     p ${1:procname}...",
      "     p                  e",
    ],
    "scope": "sqlrpgle,rpgle,rpg"
  },
  "Start free block for RPGLE FixedForm":{
    "prefix": "!beginfreeblock",
    "description": "Begin a free block syntax",
    "body": [
      "      /free",
      "       $0",
      "      /end-free",
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare options for free source":{
    "prefix": "!dclopt",
    "description": "Declare a CTL-OPTION",
    "body": [
      "CTL-OPT OPTION(∗SRCSTMT:∗NODEBUGIO) DFTACTGRP(∗No); ",
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare a variable char":{
    "prefix": "!dclvarchar",
    "description": "Declare a variable varchar",
    "body": [
      "dcl-s ${1:VARNAME} CHAR(50) INZ(${2:'TEXT'});",
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare IF statement":{
    "prefix": "!if",
    "description": "Declare a if statement",
    "body": [
      "IF ${1:CONDITION};",
      "\t$0",
      "ELSEIF ${2:CONDITION};",
      "\t$0",
      "ELSE;",
      "\t$0",
      "ENDIF;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare SELECT statement":{
    "prefix": "!select",
    "description": "Declare a select statement",
    "body": [
      "SELECT",
      " WHEN ${1:VARIABLE}=${2:RESULT1};",
      "\t$0",
      " WHEN ${3:VARIABLE}=${4:RESULT2};",
      "\t$0",
      " OTHER;",
      "\t$0",
      "ENDSL;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare Cursor statement":{
    "prefix": "!cursor",
    "description": "Declare a cursor statement",
    "body": [
      "EXEC SQL",
      " DECLARE ${1:CURSORNAME} CURSOR FOR",
      " SELECT A,B,C FROM TABLE;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare Open Cursor statement":{
    "prefix": "!opencursor",
    "description": "Declare a open cursor statement",
    "body": [
      "EXEC SQL",
      " OPEN ${1:CURSORNAME};"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare Fetch Cursor statement":{
    "prefix": "!fetchcursor",
    "description": "Declare a fetch cursor statement",
    "body": [
      "EXEC SQL",
      " FETCH ${1:CURSORNAME} INTO :${2:DATASTRUCTURE};"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare Close Cursor statement":{
    "prefix": "!closecursor",
    "description": "Declare a close cursor statement",
    "body": [
      "EXEC SQL",
      " CLOSE ${1:CURSORNAME};"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare Do While statement":{
    "prefix": "!doWhile",
    "description": "Declare Do While statement",
    "body": [
      "DOW (${1:CONDITION});",
      " //your code here",
      "ENDDO;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare Date Variable statement":{
    "prefix": "!dclvardate",
    "description": "Declare Date Variable statement",
    "body": [
      "DCL-S ${1:VARIABLE} DATE(*${2:FORMAT});"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Declare External Data Structure statement":{
    "prefix": "!dclExtDS",
    "description": "Declare External Data Structure statement",
    "body": [
      "DCL-DS ${1:DSNAME} EXTNAME('${2:FILENAME}') END-DS;"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Generate json into a IFS File":{
    "prefix": "!data-genIFS",
    "description": "Generate json into a IFS File",
    "body": [
      "DATA-GEN ${1:DSNAME} %DATA('${2:IFSFILE}':'doc=file')",
      "%Gen('YAJL/YAJLDTAGEN');"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Generate json into a variable":{
    "prefix": "!data-genVariable",
    "description": "Generate json into a variable",
    "body": [
      "DATA-GEN ${1:DSNAME} %DATA('${2:JSONVariable}')",
      "%Gen('YAJL/YAJLDTAGEN');"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Parse json into a variable from file":{
    "prefix": "!data-intoVariablefromFile",
    "description": "Parse json into a variable from file",
    "body": [
      "DATA-INTO ${1:DSNAME} %DATA('${2:Document_to_process}':'doc=file case=any')",
      "%Parser('YAJL/YAJLINTO');"
    ],
    "scope": "sqlrpgle,rpgle"
  },
  "Convert json into a variable":{
    "prefix": "!data-intoVariable",
    "description": "Convert json into a variable",
    "body": [
      "DATA-INTO ${1:DSNAME} %DATA(${2:VariableWithJson}:'case=convert')",
      "%Parser('YAJL/YAJLINTO');"
    ],
    "scope": "sqlrpgle,rpgle"
  }
  

  
}